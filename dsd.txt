import psycopg2
import snowflake.connector
import logging
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

# Redshift connection configuration
REDSHIFT_HOST = 'medai-orbit.cqibeghf1hd5.us-east-1.redshift.amazonaws.com'
REDSHIFT_PORT = '5439'  # Default Redshift port
REDSHIFT_USER = 'orbit_sa_read_only'
REDSHIFT_PASSWORD = '419iKpjj-zPX'
REDSHIFT_DB = 'orbit'

# Snowflake connection configuration
sf_user = 'SA-JRDUS-ORBIT-ENG-D'
# sf_user = 'KDUBE1'
sf_account = 'jrd-bt-useast.privatelink'
sf_warehouse = 'WH_ORBIT_DEV_ETL'
sf_database = 'ORBIT_DEV'
sf_schema = 'CERBA'
sf_role = 'ITS_APP_DEV_RDDW_ORBIT_DEVELOPERS'

# Path to your private key (.p8 or .pem)
PRIVATE_KEY_PATH = 'sa-jrdus-orbit-eng-d_rsa_key.p8'  # 🔁 UPDATE THIS
PRIVATE_KEY_PASSPHRASE = b'0rB1THkjSu9'  # If applicable, replace with your passphrase

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,  # Change to DEBUG for more detailed logs
    filename='view_migration.log',
    filemode='w'
)

# -------------------------------------------
# Load private key for Snowflake
# -------------------------------------------
def get_private_key():
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=PRIVATE_KEY_PASSPHRASE,
            backend=default_backend()
        )
    return private_key.private_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )

# -------------------------------------------
# Function to connect to Redshift
# -------------------------------------------
def connect_to_redshift():
    try:
        connection = psycopg2.connect(
            dbname=REDSHIFT_DB,
            user=REDSHIFT_USER,
            password=REDSHIFT_PASSWORD,
            host=REDSHIFT_HOST,
            port=REDSHIFT_PORT
        )
        logging.info("Connected to Redshift successfully.")
        return connection
    except Exception as e:
        logging.error(f"Error connecting to Redshift: {e}")
        raise

# -------------------------------------------
# Function to connect to Snowflake with Role and Private Key
# -------------------------------------------
def connect_to_snowflake():
    try:
        private_key = get_private_key()

        connection = snowflake.connector.connect(
            user=sf_user,
            account=sf_account,
            private_key=private_key,
            warehouse=sf_warehouse,
            database=sf_database,
            schema=sf_schema,
            role=sf_role  # Include role
        )
        logging.info("Connected to Snowflake successfully.")
        return connection
    except Exception as e:
        logging.error(f"Error connecting to Snowflake: {e}")
        raise

# -------------------------------------------
# Function to fetch the correct case of tables and views in Snowflake
# -------------------------------------------
def fetch_snowflake_objects():
    connection = connect_to_snowflake()
    cursor = connection.cursor()

    # Fetch tables
    cursor.execute(f"SHOW TABLES IN SCHEMA {sf_database}.{sf_schema}")
    tables = {row[1].lower(): row[1] for row in cursor.fetchall()}  # lowercase -> original case

    # Fetch views
    cursor.execute(f"SHOW VIEWS IN SCHEMA {sf_database}.{sf_schema}")
    views = {row[1].lower(): row[1] for row in cursor.fetchall()}  # lowercase -> original case

    # Combine tables and views into one mapping
    object_mapping = {**tables, **views}
    
    connection.close()
    logging.info(f"Fetched {len(object_mapping)} objects (tables and views) from Snowflake.")
    return object_mapping

# -------------------------------------------
# Function to fetch the view definitions from Redshift
# -------------------------------------------
def fetch_redshift_views():
    connection = connect_to_redshift()
    cursor = connection.cursor()

    cursor.execute("""
        SELECT table_name, view_definition
        FROM information_schema.views
        WHERE table_schema = 'orbit_64407564mmy3009'
    """)

    views = cursor.fetchall()
    connection.close()

    logging.info(f"Fetched {len(views)} views from Redshift.")
    return views

# -------------------------------------------
# Function to map Redshift table names to Snowflake table names in view definitions
# -------------------------------------------
def map_table_names_in_view(view_definition, object_mapping):
    for redshift_name, snowflake_name in object_mapping.items():
        # Replace unquoted and quoted occurrences with fully quoted Snowflake name
        view_definition = view_definition.replace(f'"{redshift_name}"', f'"{snowflake_name}"')
        view_definition = view_definition.replace(f'{redshift_name}', f'"{snowflake_name}"')
    return view_definition

# -------------------------------------------
# Function to create views in Snowflake
# -------------------------------------------
def create_view_in_snowflake(view_name, view_definition):
    connection = connect_to_snowflake()
    cursor = connection.cursor()

    try:
        # Ensure the view name is quoted correctly with the schema and view name
        quoted_view_name = f'"{sf_schema}"."{view_name}"'

        # Create the view in Snowflake
        create_view_query = f'CREATE OR REPLACE VIEW {quoted_view_name} AS {view_definition}'
        cursor.execute(create_view_query)
        connection.commit()
        logging.info(f"Created view {view_name} in Snowflake.")
    except Exception as e:
        logging.error(f"Error creating view {view_name} in Snowflake: {e}")
        connection.rollback()
    finally:
        connection.close()

# -------------------------------------------
# Function to migrate views from Redshift to Snowflake
# -------------------------------------------
def migrate_views_to_snowflake():
    try:
        # Fetch views from Redshift
        views = fetch_redshift_views()

        # Fetch tables and views from Snowflake
        object_mapping = fetch_snowflake_objects()

        # Migrate each view
        for view_name, view_definition in views:
            logging.info(f"Migrating view {view_name}...")

            # Map Redshift object names to Snowflake object names
            snowflake_view_definition = map_table_names_in_view(view_definition, object_mapping)

            # Adjust for Snowflake-specific syntax (e.g., date functions)
            snowflake_view_definition = snowflake_view_definition.replace(
                "(('now'::text)::date - ('1 year'::interval * (\"SECOND\".age)::double precision))",
                "DATEADD(YEAR, - \"SECOND\".age, CURRENT_DATE)"
            )

            # Create the view in Snowflake
            create_view_in_snowflake(view_name, snowflake_view_definition)

        logging.info("View migration from Redshift to Snowflake completed successfully.")
    except Exception as e:
        logging.error(f"Error during view migration: {e}")
        raise

# Main execution    
if __name__ == "__main__":
    try:
        migrate_views_to_snowflake()
    except Exception as e:
        logging.critical(f"Critical error during view migration: {e}")
