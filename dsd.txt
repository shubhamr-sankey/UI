import snowflake.connector
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

# Snowflake connection configuration
sf_user = 'SA-JRDUS-ORBIT-ENG-D'
sf_account = 'jrd-bt-useast.privatelink'
sf_warehouse = 'WH_ORBIT_DEV_ETL'
sf_database = 'ORBIT_DEV'
sf_schema = 'CERBA'
sf_role = 'ITS_APP_DEV_RDDW_ORBIT_DEVELOPERS'  # Replace with the desired role

# Path to your private key (.p8 or .pem)
PRIVATE_KEY_PATH = 'sa-jrdus-orbit-eng-d_rsa_key.p8'  # üîÅ UPDATE THIS
PRIVATE_KEY_PASSPHRASE = b'0rB1THkjSu9'  # Or use None if the key has no passphrase

# -------------------------------------------
# Load private key for Snowflake
# -------------------------------------------
def get_private_key():
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=PRIVATE_KEY_PASSPHRASE,
            backend=default_backend()
        )
    return private_key.private_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )

# -------------------------------------------
# Function to connect to Snowflake with role
# -------------------------------------------
def connect_to_snowflake():
    private_key = get_private_key()

    return snowflake.connector.connect(
        user=sf_user,
        account=sf_account,
        private_key=private_key,
        warehouse=sf_warehouse,
        database=sf_database,
        schema=sf_schema,
        role=sf_role  # Add role parameter here
    )

# -------------------------------------------
# Function to get all tables in the schema
# -------------------------------------------
def get_all_tables_in_schema():
    connection = connect_to_snowflake()
    cursor = connection.cursor()

    query = f"""
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema = '{sf_schema}'
    AND table_type = 'BASE TABLE' AND table_name = 'vendor_alias'
    """

    cursor.execute(query)
    tables = cursor.fetchall()
    connection.close()

    # Return table names (list of tuples)
    return [table[0] for table in tables]

# -------------------------------------------
# Function to drop all tables in the schema
# -------------------------------------------
def drop_all_tables():
    tables = get_all_tables_in_schema()

    if not tables:
        print("No tables found in the schema.")
        return

    connection = connect_to_snowflake()
    cursor = connection.cursor()

    for table in tables:
        drop_query = f"DROP TABLE IF EXISTS {sf_schema}.{table}"

        try:
            cursor.execute(drop_query)
            print(f"‚úÖ Table {table} dropped successfully.")
        except Exception as e:
            print(f"‚ùå Error dropping table {table}: {e}")
    
    connection.close()

# -------------------------------------------
# Run the script to drop all tables
# -------------------------------------------
if __name__ == "__main__":
    drop_all_tables()
