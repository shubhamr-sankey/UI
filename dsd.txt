syntax error line 22 at position 36 unexpected '~'.
syntax error line 54 at position 44 unexpected '~'.
syntax error line 61 at position 44 unexpected '~'.
syntax error line 106 at position 73 unexpected '~'.
syntax error line 106 at position 197 unexpected 'THEN'.
syntax error line 107 at position 21 unexpected 'SPECIMEN'.
syntax error line 108 at position 93 unexpected '4'.
syntax error line 133 at position 80 unexpected '~'.
syntax error line 154 at position 46 unexpected ')'. (line 20)

-- CERBA.collection_tracking_vw source

CREATE OR REPLACE VIEW CERBA.COLLECTION_TRACKING_VW
AS 
SELECT DISTINCT 
    SS.SUBJECT_ID, 
    SS.SITE_ID, 
    S.SITE_COUNTRY_NAME, 
    SS.DATE_SCREENING, 
    SS.DATE_SCREEN_FAILURE, 
    SS.DATE_ENROLLMENT, 
    SS.DATE_TERMINATION, 
    SS.STUDY_SUBJECT_STATUS, 
    SS.STUDY_ARM, 
    SS.STUDY_PART, 
    NULL::TEXT AS COHORT, 
    V.VISIT_DATE_EXP, 
    REGEXP_REPLACE(BPS.VISIT_WINDOW::TEXT, '[^0-9]'::TEXT, ''::TEXT)::CHARACTER VARYING AS VISIT_WINDOW_DAYS, 
    CASE
        WHEN BPS.VISIT_WINDOW::TEXT ~~ '%-%'::TEXT THEN V.VISIT_DATE_EXP - REGEXP_REPLACE(BPS.VISIT_WINDOW::TEXT, '[^0-9]'::TEXT, ''::TEXT)::INTEGER
        ELSE V.VISIT_DATE_EXP
    END AS EXP_VISIT_WINDOW_MIN, 
    CASE
        WHEN BPS.VISIT_WINDOW::TEXT ~~ '%+%'::TEXT THEN V.VISIT_DATE_EXP + REGEXP_REPLACE(BPS.VISIT_WINDOW::TEXT, '[^0-9]'::TEXT, ''::TEXT)::INTEGER
        ELSE V.VISIT_DATE_EXP
    END AS EXP_VISIT_WINDOW_MAX, 
    V.VISIT_DATE_ACTL, 
    V.VISIT_OID AS V_VISIT_OID, 
    SP.VISIT_ID AS SP_VISIT_ID, 
    SP.SPECIMEN_COLLECTION_DATE, 
    BPS."REGION", 
    BPS.VENDOR_ID, 
    VD.VENDOR_NAME, 
    BPS.VISIT_OID AS EXP_VISIT, 
    BPS.VISIT_NAME AS EXP_VISIT_NAME, 
    BPS.ARM AS EXP_ARM, 
    BPS.ASSESSMENT_GROUP, 
    BPS.ASSESSMENT, 
    BPS.EXP_SPECIMEN_TYPE, 
    BPS.TIMEPOINT, 
    BPS.VENDOR_SPECIMEN_TYPE AS EXP_SPECIMEN_CLASS, 
    BPS.SPECIMEN_VISIT_ID, 
    CONCAT(CONCAT(BPS.VISIT_NAME::TEXT, '_'::TEXT), BPS.ASSESSMENT::TEXT)::CHARACTER VARYING AS SCHEDULED_COLLECTION, 
    SP.SPECIMEN_CLASS, 
    SP.SPECIMEN_TYPE, 
    SP.ACCESSION_NUMBER, 
    SP.SPECIMEN_ID, 
    SP.SPECIMEN_RECEIVED_DATE, 
    SP.SPECIMEN_ACCESSION_DATE, 
    SP.SPECIMEN_STATUS, 
    COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) AS PAST_VISIT_DATE, 
    CASE
        WHEN SP.SPECIMEN_COLLECTION_DATE IS NOT NULL OR SP.SPECIMEN_ID IS NOT NULL THEN 'Collected'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NULL AND (COALESCE(
            CASE
                WHEN BPS.VISIT_WINDOW::TEXT ~~ '%+%'::TEXT THEN V.VISIT_DATE_EXP + REGEXP_REPLACE(BPS.VISIT_WINDOW::TEXT, '[^0-9]'::TEXT, ''::TEXT)::INTEGER
                ELSE V.VISIT_DATE_EXP
            END, V.VISIT_DATE_EXP) + 7) >= GETDATE() AND SS.STUDY_SUBJECT_STATUS::TEXT <> 'Early Terminated'::TEXT AND SS.STUDY_SUBJECT_STATUS::TEXT <> 'Screen Failed'::TEXT THEN 'Future Collection'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NULL AND V.VISIT_DATE_EXP IS NULL AND SS.STUDY_SUBJECT_STATUS::TEXT <> 'Screening'::TEXT AND SS.STUDY_SUBJECT_STATUS::TEXT <> 'Early Terminated'::TEXT AND SS.STUDY_SUBJECT_STATUS::TEXT <> 'Screen Failed'::TEXT THEN 'Future Collection'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NOT NULL AND GETDATE() <= (COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) + 7::BIGINT) THEN 'Pending'::TEXT
        WHEN SP.SPECIMEN_COLLECTION_DATE IS NULL AND SP.SPECIMEN_ID IS NULL AND GETDATE() > (COALESCE(
            CASE
                WHEN BPS.VISIT_WINDOW::TEXT ~~ '%+%'::TEXT THEN V.VISIT_DATE_EXP + REGEXP_REPLACE(BPS.VISIT_WINDOW::TEXT, '[^0-9]'::TEXT, ''::TEXT)::INTEGER
                ELSE V.VISIT_DATE_EXP
            END::TIMESTAMP WITHOUT TIME ZONE, V.VISIT_DATE_EXP::TIMESTAMP WITHOUT TIME ZONE, COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE)) + 7::BIGINT) THEN 'Missed Collection'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NULL AND SS.STUDY_SUBJECT_STATUS::TEXT = 'Early Terminated'::TEXT AND (V.VISIT_DATE_EXP >= SS.DATE_TERMINATION OR V.VISIT_DATE_EXP IS NULL) THEN 'Not Expected'::TEXT
        ELSE NULL::TEXT
    END::CHARACTER VARYING AS COLLECTION_STATUS, 
    BPS.PROTOCOL_VERSION, 
    BPS.PROTOCOL_START_DATE, 
    BPS.PROTOCOL_END_DATE, 
    CASE
        WHEN (SS.STUDY_SUBJECT_STATUS::TEXT = 'Screening'::TEXT OR SS.STUDY_SUBJECT_STATUS::TEXT = 'Screen Failed'::TEXT) AND BPS.VISIT_OID::TEXT <> 'SCREEN'::TEXT THEN 'remove'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NOT NULL AND COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) >= BPS.PROTOCOL_START_DATE AND (COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) <= BPS.PROTOCOL_END_DATE OR BPS.PROTOCOL_END_DATE IS NULL) THEN 'keep'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NULL AND V.VISIT_DATE_EXP >= BPS.PROTOCOL_START_DATE AND (V.VISIT_DATE_EXP <= BPS.PROTOCOL_END_DATE OR BPS.PROTOCOL_END_DATE IS NULL) THEN 'keep'::TEXT
        WHEN COALESCE(V.VISIT_DATE_ACTL::TIMESTAMP WITHOUT TIME ZONE, SP.SPECIMEN_COLLECTION_DATE, SV.SPECIMEN_COLLECTION_DATE) IS NULL AND V.VISIT_DATE_EXP IS NULL AND BPS.PROTOCOL_END_DATE IS NULL THEN 'keep'::TEXT
        ELSE 'remove'::TEXT
    END::CHARACTER VARYING AS ON_PROTOCOL, 
    BPS.COLLECTION_COMMENT
FROM 
    (SELECT STUDY_SUBJECT.STUDY_ID, 
            STUDY_SUBJECT.SUBJECT_ID, 
            STUDY_SUBJECT.SITE_ID, 
            STUDY_SUBJECT.DATE_SCREENING, 
            STUDY_SUBJECT.DATE_SCREEN_FAILURE, 
            STUDY_SUBJECT.DATE_ENROLLMENT, 
            STUDY_SUBJECT.DATE_TERMINATION, 
            STUDY_SUBJECT.STUDY_SUBJECT_STATUS, 
            STUDY_SUBJECT.STUDY_ARM, 
            STUDY_SUBJECT.STUDY_PART
     FROM CERBA.STUDY_SUBJECT) SS
CROSS JOIN CERBA.BIOMARKER_SCHEDULE BPS
LEFT JOIN 
    (SELECT SPECIMEN.SUBJECT_ID, 
            SPECIMEN.VISIT_ID, 
            SPECIMEN.SPECIMEN_CLASS, 
            SPECIMEN.SPECIMEN_TYPE, 
            SPECIMEN.VENDOR_SPECIMEN_TYPE, 
            SPECIMEN.ACCESSION_NUMBER, 
            SPECIMEN.SPECIMEN_ID, 
            SPECIMEN.SPECIMEN_COLLECTION_DATE, 
            SPECIMEN.SPECIMEN_RECEIVED_DATE, 
            SPECIMEN.SPECIMEN_ACCESSION_DATE, 
            SPECIMEN.SPECIMEN_STATUS, 
            SPECIMEN.VENDOR_ID, 
            CASE
                WHEN SPECIMEN.VENDOR_ID = 21 AND (SPECIMEN.SPECIMEN_CLASS::TEXT = 'CYTOF'::TEXT OR SPECIMEN.SPECIMEN_CLASS::TEXT = 'CYTOF/Molecular Markers'::TEXT) THEN 'CYTOF, CYTOF/Molecular Markers'::CHARACTER VARYING
                WHEN SPECIMEN.VENDOR_ID = 21 AND SPECIMEN.VISIT_ID::TEXT ~~ '%SCREENING'::TEXT AND (SPECIMEN.SPECIMEN_CLASS::TEXT = 'MRD'::TEXT OR SPECIMEN.SPECIMEN_CLASS::TEXT = 'ARCHIVAL'::TEXT) THEN 'MRD, ARCHIVAL'::CHARACTER VARYING
                WHEN SPECIMEN.VENDOR_ID = 21 THEN SPECIMEN.SPECIMEN_CLASS
                WHEN SPECIMEN.VENDOR_ID = 3 THEN "LEFT"(SPECIMEN.VENDOR_SPECIMEN_TYPE::TEXT, 4)::CHARACTER VARYING
                ELSE SPECIMEN.VENDOR_SPECIMEN_TYPE
            END AS SPEC_TYPE_MATCH, 
            CASE
                WHEN SPECIMEN.VENDOR_ID = 21 THEN SPLIT_PART(SPECIMEN.VISIT_ID::TEXT, '|'::TEXT, 2)::CHARACTER VARYING
                ELSE SPECIMEN.VISIT_ID
            END AS VISIT_ID_MATCH
    FROM CERBA.SPECIMEN) SP 
    ON SS.SUBJECT_ID::TEXT = SP.SUBJECT_ID::TEXT 
    AND UPPER(BPS.SPECIMEN_VISIT_ID::TEXT) = UPPER(SP.VISIT_ID_MATCH::TEXT) 
    AND (BPS.VENDOR_SPECIMEN_TYPE::TEXT = SP.SPEC_TYPE_MATCH::TEXT OR BPS.VENDOR_SPECIMEN_TYPE IS NULL)
LEFT JOIN CERBA.STUDY_SITE SST ON SS.SITE_ID::TEXT = SST.SITE_ID::TEXT AND SS.STUDY_ID::TEXT = SST.STUDY_ID::TEXT
LEFT JOIN CERBA.SITE S ON SS.SITE_ID::TEXT = S.SITE_ID::TEXT AND SS.STUDY_ID::TEXT = S.STUDY_ID::TEXT AND SST.SITE_COUNTRY::TEXT = S.SITE_COUNTRY_CODE::TEXT
LEFT JOIN CERBA.VENDOR VD ON BPS.VENDOR_ID::TEXT = VD.VENDOR_ID::TEXT
LEFT JOIN 
    ((SELECT VISIT.SUBJECT_ID, 
             VISIT.VISIT_NAME, 
             VISIT.VISIT_OID, 
             VISIT.VISIT_DATE_EXP, 
             VISIT.VISIT_DATE_ACTL, 
             VISIT.VISIT_OID AS VISIT_MATCH
      FROM CERBA.VISIT
    UNION 
    SELECT DISTINCT SUBJECT_TEST_RESPONSE.SUBJECT_ID, 
            CASE
                WHEN SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE_DESCRIPTION::TEXT ~~ '%Complete Response'::TEXT THEN 'Stringent/Complete Response'::CHARACTER VARYING
                ELSE SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE_DESCRIPTION
            END AS VISIT_NAME, 
            CASE
                WHEN SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'CR'::TEXT OR SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'sCR'::TEXT THEN 'CR/sCR'::CHARACTER VARYING
                ELSE SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE
            END AS VISIT_OID, 
            NULL::DATE AS VISIT_DATE_EXP, 
            MIN(SUBJECT_TEST_RESPONSE.SUBJECT_TEST_DATE::DATE)
      OVER( 
      PARTITION BY SUBJECT_TEST_RESPONSE.SUBJECT_ID, 
            CASE
                WHEN SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'CR'::TEXT OR SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'sCR'::TEXT THEN 'CR/sCR'::CHARACTER VARYING
                ELSE SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE
            END
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS VISIT_DATE_ACTL, 
            CASE
                WHEN SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'CR'::TEXT OR SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE::TEXT = 'sCR'::TEXT THEN 'CR/sCR'::CHARACTER VARYING
                ELSE SUBJECT_TEST_RESPONSE.SUBJECT_TEST_VALUE
            END AS VISIT_MATCH
      FROM CERBA.OUTCOME.SUBJECT_TEST_RESPONSE
      WHERE SUBJECT_TEST_RESPONSE.TEST_ID = 18) V
    ) V
    ON SS.SUBJECT_ID::TEXT = V.SUBJECT_ID::TEXT 
    AND BPS.VISIT_OID::TEXT = V.VISIT_MATCH::TEXT;
