 <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script> 

@using (Html.BeginForm("UploadExcel", "UserRoleAccessMapping", FormMethod.Post, new { enctype = "multipart/form-data", @id = "uploadForm" }))
{
    @Html.AntiForgeryToken()
    <div class="main-filter-tab" style="margin-top: 10px;">
        <div>
            <label for="fileUpload">Select an Excel file:</label>
            <input type="file" id="fileUpload" name="file" class="form-control" accept=".xls,.xlsx" />
        </div>

        <br />
        <button type="submit" id="uploadButton" onClick='validateEmails' class="btn btn-primary">Upload</button>

 <script type="text/javascript">
    

    function validateEmails() {
         const fileInput = document.getElementById('fileUpload');
         if (!fileInput.files.length) {
             alert("Please upload a file first.");
             return;
         }

         const file = fileInput.files[0];

         // Read the file using FileReader
         const reader = new FileReader();
         reader.onload = function(event) {
             const data = event.target.result;
             const workbook = XLSX.read(data, { type: 'binary' });

             // Assuming the data is in the first sheet
             const sheet = workbook.Sheets[workbook.SheetNames[0]];
             const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Read as an array of rows

             // Find the index of the "useremail" column
             const emailColumnIndex = rows[0].indexOf('UserEmail');
             if (emailColumnIndex === -1) {
                 alert("No 'useremail' column found in the file.");
                 return;
             }

             // Validate email in each row
             let invalidRows = [];
             const emailRegex = /^[a-zA-Z0-9._-]+[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;

             for (let i = 1; i < rows.length; i++) { // Start from 1 to skip header row
                 const email = rows[i][emailColumnIndex];
                 if (email && !emailRegex.test(email)) {
                     invalidRows.push({
                         row: i + 1,  // Row number starts from 1
                         column: 'UserEmail',
                         email: email
                     });
                 }
             }

             // Show the result in a popup (alert)
             if (invalidRows.length > 0) {
                 let resultMessage = 'Invalid Emails Found:\n\n';
                 invalidRows.forEach(item => {
                     resultMessage += `Row ${item.row}, Column ${item.column} - Invalid Email: ${item.email}\n`;
                 });
                 alert(resultMessage);
             } else {
                 alert('All emails are valid!');
             }
         };

         // Read the uploaded file as binary string
         reader.readAsBinaryString(file);
     }
 </script>


        @if (ViewBag.ErrorMessage != null)
        {
            <p class="error-div">@ViewBag.ErrorMessage</p>
        }
        @if (ViewBag.SuccessMessage != null)
        {
            <p style="color: green;">@ViewBag.SuccessMessage</p>
        }
        @if (ViewBag.ErrorMessages != null && ViewBag.ErrorMessages.Count > 0)
        {
            <div class="error-div">
                @foreach (var error in ViewBag.ErrorMessages)
                {
                    <p>@error</p>
                }
            </div>
        }
    </div>
}
