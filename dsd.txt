import snowflake.connector
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

# Snowflake connection config
sf_user = 'SA-JRDUS-ORBIT-ENG-D'
sf_account = 'jrd-bt-useast.privatelink'
sf_warehouse = 'WH_ORBIT_DEV_ETL'

# Private key path and passphrase
PRIVATE_KEY_PATH = 'sa-jrdus-orbit-eng-d_rsa_key.p8'
PRIVATE_KEY_PASSPHRASE = b'0rB1THkjSu9'

# Load private key
def get_private_key():
    with open(PRIVATE_KEY_PATH, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=PRIVATE_KEY_PASSPHRASE,
            backend=default_backend()
        )
    return private_key.private_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )

# Connect to Snowflake
def connect_to_snowflake():
    private_key = get_private_key()
    return snowflake.connector.connect(
        user=sf_user,
        account=sf_account,
        private_key=private_key,
        warehouse=sf_warehouse
    )

# List all databases
def list_all_databases():
    connection = connect_to_snowflake()
    cursor = connection.cursor()

    try:
        cursor.execute("SHOW DATABASES")
        databases = cursor.fetchall()

        print("üì¶ Databases available in this Snowflake account:")
        for db in databases:
            print(f"- {db[1]}")  # db[1] = database name
    except Exception as e:
        print(f"‚ùå Error fetching databases: {e}")
    finally:
        cursor.close()
        connection.close()

# Run the script
if __name__ == "__main__":
    list_all_databases()
