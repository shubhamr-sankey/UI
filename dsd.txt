 public List<string> ProcessExcelFile(IRBADatabaseEntities dbDatabase, Stream fileStream)
 {
     var errorMessages = new List<string>();

     try
     {
         using (var package = new ExcelPackage(fileStream))
         {
             // Check if there are any worksheets
             if (package.Workbook.Worksheets.Count == 0)
             {
                 errorMessages.Add("The uploaded Excel file contains no worksheets.");
                 return errorMessages;
             }

             // Access the first worksheet safely
             var worksheet = package.Workbook.Worksheets[1];

             // Check if the worksheet has any data
             if (worksheet.Dimension == null)
             {
                 errorMessages.Add("The first worksheet is empty.");
                 return errorMessages;
             }

             var rowCount = worksheet.Dimension.Rows;

             for (int row = 2; row <= rowCount; row++)
             {
                 var userEmail = worksheet.Cells[row, 1].Text?.Trim();
                 var countryId = worksheet.Cells[row, 2].Text?.Trim();
                 var roleName = worksheet.Cells[row, 3].Text?.Trim();
                 var screenName = worksheet.Cells[row, 4].Text?.Trim();
                 var userType = worksheet.Cells[row, 5].Text?.Trim();
                 var accessLevel = worksheet.Cells[row, 6].Text?.Trim();
                 var assignCountry = worksheet.Cells[row, 7].Text?.Trim();

                 // Collect missing required fields
                 if (string.IsNullOrEmpty(userEmail) || string.IsNullOrEmpty(roleName) || string.IsNullOrEmpty(screenName) || string.IsNullOrEmpty(userType))
                 {
                     errorMessages.Add($"Row {row}: Required fields (Email, Role, Screen, User Type) are missing.");
                     continue;
                 }

                 // Validate RoleAccessMapping table
                 var roleAccessId = GetRoleAccessMapping(dbDatabase, roleName, screenName, userType);
                 if (roleAccessId == null)
                 {
                     errorMessages.Add($"Row {row}: Role '{roleName}', Screen '{screenName}', or Access '{userType}' combination not found in RoleAccessTable.");

                     continue;
                     
                 }

                 // Step 1: Handle User Details
                 var userId = GetOrCreateUser(dbDatabase, userEmail, out string userName, out string opcoName);

                 // Step 2: Handle User Role Access Mapping
                 var userRoleAccessMapping = dbDatabase.User_Role_Access_Mapping
                     .FirstOrDefault(ura => ura.UserId == userId && ura.RoleAccessId == roleAccessId);

                 if (userRoleAccessMapping != null)
                 {
                     userRoleAccessMapping.Country = assignCountry;
                     dbDatabase.SaveChanges();
                 }
                 else
                 {
                     var newUserRoleAccessMapping = new User_Role_Access_Mapping
                     {
                         UserId = userId,
                         RoleAccessId = (long)roleAccessId,
                         Country = assignCountry,
                         CreatedBy = "System", // Replace with actual logged-in user
                         CreatedDate = DateTime.Now,
                         UpdatedBy = "System",
                         UpdatedDate = DateTime.Now
                     };
                     dbDatabase.User_Role_Access_Mapping.Add(newUserRoleAccessMapping);
                     dbDatabase.SaveChanges();
                 }
             }
         }
     }
     catch (Exception ex)
     {
         errorMessages.Add($"Error processing the file: {ex.Message}");
     }

     return errorMessages;
 }
